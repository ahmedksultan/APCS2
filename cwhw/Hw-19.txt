Round Robin Schedulers
=======================================================================

A populur use of a queue data structure is to implement a round robin
scheduler, where we iterate through a collection of elements in a
circular fashion and "service" each element by performing a given
action on it.

Such a schedule is used, to fairly allocate a resource that must be
shared by a collection of clients.

A round robin scheduler is used to allocate a slice of CPU time to 
various applications running concurrently on a computer.


To implement a round robin scheduler using a queue, Q,  repeat
the following 3 steps

	   1. e <- Q.dequeue()
	   2. service element e
	   3. Q.enqueue(e)

Hot Potato Game
=======================================================================
 In the children's game "hot potato" a group of n children sit in
 a circle passing an object, called the potato, around the circle.

 An adult randomly shouts "hot potato", upon which the child with
 the potato is removed from the circle after the child hands off the
 potato to the next child in the circle.

 This process is repeated  until 1 child is left.


The Josephus Problem
======================================================================
If the adult uses the strategy of calling "hot potato" after the
potato has been passed k times, then determining the winner for
a given list of children is known as the Josephus Problem.

=======================================================================
 Exercise # 1
========================================================================
 Implement a solution to the Josephus Problem.

public class Josephus{

 public static<E> MyQueue<E> buildQueue(ArrayList<E> players){
   	  MyQueue<E> ans = new ArrayQueue<E>(players.size());
	  for (E player : players)
	      ans.add(player);
	  return ans;
   }

   // Pre: k > 0
   // Post: Uses a round robin scheduler to determine 
   //       the winner.
  public static<E> E josephus(MyQueue<E> q, int k){





 }

 Here's a sample run with k = 2.
 Bobby starts with the "Potato" and passes it to Sue who passes it
 to Amy. Amy is then removed. Mark picks up the potato and passes
 it to Danny, who passes it to Kelly, etc. .
 Children: [Bobby, Sue, Amy, Mark, Danny, Kelly, Yuki]
 Remove : Amy
 Children: [Mark, Danny, Kelly, Yuki, Bobby, Sue]
 Remove : Kelly
 Children: [ Yuki, Bobby, Sue, Mark, Danny]
 Remove : Sue
 Children: [ Mark, Danny, Yuki, Bobby]
 Remove : Yuki
 Children: [ Bobby, Mark, Danny]
 Remove : Danny
 Children: [ Bobby, Mark]
 Remove : Bobby
 Mark is the WINNER!!!!!!

==========================================================================
Exercise #2
==========================================================================
   Use a queue to generate all possible subsets of an n-element
   set nonrecursively. A set does not contain duplicate elements.

   The order of the output does not matter.

  Example Run:
  If the set is [1,2,3,4]
  Subsets:
  [],[1],[2],[3],[4],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4],[1,2,3],
  [1,2,4], [1,3,4], [2,3,4], [1,2,3,4].
