Part I
===========================================================================

1. Given a node at index i, assume i > 0, devise a formula to
   compute the index of its parent.


2. Given a binary heap of n elements, devise a formula to compute
   its height.




3.  Compute the index of the non leaf node with the largest index.
    Assume there are N elemements and N > 1.


4.  Give a binary heap with height h:

     a. Determine the maximum number of nodes on the last level?

     b. Determine the number of nodes on the second to last level?




Part II:
====================================================================

public class BinaryHeap{

      public static void print(int [] data){
      	     for (int x :  data)
	     	 System.out.print(x + " ");
             System.out.println():
      }

      // pre: data != null and both i and j are index positions
      // post: the elements data[i] and data[j] are exchanged.
      public static void swap(int [] data, int i, int j){
      	     int temp = data[i];
	     data[i] = data[j];
	     data[j] = temp;
      }

      // Pre: data != null. data represents a binary tree
      //      that is complete up to the last level and
      //      the last level is filled from left to right
      //      up to a point.
      // Post: returns true if data has heap property
      //       false otherwise.
      public static boolean isHeap(int [] data){
      	     return isHeapHelper(data,0);
      }

      private static boolean isHeapHelper(int[] data, int i){
      	      // YOUR CODE GOES HERE
      }


       public static void main(String [] args){
       	      int [] bheap = {5,1,3};
	      print(bheap);

       }

}



1. Write the method isHeapHelper(int[] data,int i) to recursively
   determine whether data has heap property.
   Heap Property: When the key of each parent is larger than or
   equal to the keys of its children.

    ex. isHeap([5,3,1]) -> true
        isHeap([1,5,3]) -> false
	isHeap([5,3,4,1,2,4]) -> true
        isHeap([5,3,4,4,2,3]) -> false


2. Write the recursive method heapify(int[] data, int i) that turns the
   binary tree rooted at index i into a heap.

   data before method call  method call               after method call
    [1,3,5]    	      	    heapify(data,0)  	      [5,3,1]
    [5,2,8,7,3,4,6,5]	    heapify(data,1)           [5,7,8,5,3,4,6,2]
    [5,7,8,5,3,4,6,2]       heapify(data,0)           [8,7,6,5,3,4,5,2]



  // Pre: data != null,  0<= i < data.length
  //      data represents a binary tree that is complete
  //      up to the last level and the last level is
  //      filled from left to right up to a point.
  // Post: the binary tree with its root located
  //       at index i has heap property

   public static void heapify(int [] data, int i){
   }
