1. PostScript is a powerful graphics language developed by the Adobe
   Corporation in the early 1980s. PostScript programs store their data on a
   stack. Many of the operators available in the PostScript language have the
   effect of manipulating the stack in some way. You can, for example,
   invoke the pop operator, which pops the top element off the stack,
   or the exch operator, which swaps the top two elements.

   One of the most interesting (and surprisingly useful) PostScript operators
   is the roll operator, which takes two arguments, n and k. The effect of
   applying roll(n,k) is to rotate the top n elements of a stack by k
   positions, where the general direction of the rotation is toward the top
   of the stack. More specifically, roll(n,k) has the effect  of removing
   the top n elements, cycling the top element to the last position k times,
   and then replacing the reordered  elements on the stack. For example,

   roll(4,1)            roll(3,2)            roll(2,4)

   | D |    | C |       | D |    | B |       | D |    | D |
   | C |    | B |       | C |    | D |       | C |    | C |
   | B | -> | A |       | B | -> | C |       | B | -> | B |
   | A |    | D |       | A |    | A |       | A |    | A |

   Write the method

         void roll(Stack<String> stack, int n, int k)

   that implements the roll(n,k) operation on the specified stack. Your
   implementation should check that n and k are both nonnegative and that
   n is not larger than the stack size; if either of these conditions
   is violated, your implementation should throw a runtime exception
   with the message

            roll: argument out of range

------------------------------------------------------------------------

2. Write a program to evaluate a fully parenthesized infix expressions.
   For example, the infix expression ((2 + 3) * 4)  evaluates to 20.
   Note, an infix expresssion is fully parenthesized if there are a
   set of parentheses for each operator.

   Your program needs to recognize just the operators: +,-,*,/,%,
   and the sqrt function.

   The operands of the expression can be either integers or floats.
   However, assume each operand is nonnegative.


   In the program, an expression is stored a String. The
   provided function, getTokens(), takes a String expression and
   returns a String array containing the tokens of the expression.
   The tokens of the expressions include: all numbers, (), +-*/%, and sqrt.

   For example,

   getTokens("((25 + (sqrt 4) ) - 1.0)")
   returns ["(","(","25","+","(","sqrt", "4",")",")","-","1.0",")",")"]


   Your task is to complete the function evaluate(String[] expTokens) that
   receives a String array of the tokens and returns the result of evaluating
   the tokens.

   For example,
       String exp = "((25 + (sqrt 4) ) - 1.0)";
       String [] tokens = getTokens(exp);
       Double result = evaluate(tokens);
       // result will be 26.0

       Use the following algorithm in writitng the evaluate().:
       Have two stacks, one for the operators and one for the operands.
       Process each token of the expression.
       Ignore all ('s.
       If a token is an operator, push it onto the operator stack.
       Push numbers, as floats(type Double), onto the operand stack.
       When a ) is encountered, pop the operand stack for the required
       amount of operands, compute the result and push the result back
       onto the operand stack.
       When no more tokens are to be processed, then the top of the operand
       stack should hold the final result.



Implement the Double evaluate(String[]) function found in Evaluator.java.


3, Write a program in which Cookie Monster finds the optimal path from
   the upper-left corner(0,0) to the lower-right corner (length - 1, length -1)
   in a cookie-grid (a 2-D array). Each element of the grid contains either
   some number of cookies (a non-negative integer) or a barrel(-1). On
   each step Cookie Monster can only go down or to the right. The monster
   is not allowed to step on barrels. The optimal path contains
   the largest number of cookies.

   Hints: Use a stack. If there is only one way to proceed from the current
   position, then go there and update the total accumulated number of cookies.
   If there are two ways to proceed, save one of the possible two points
   (and its total) on the stack and proceed to the other point. If you
   have reached the lower-right corner, update the maximum. If there is
   nowhere to go, examine the stack: pop a saved point, if any, and
   resume from there.
